{
  "endpoint": "POST /api/gaps/generate",
  "description": "Generates 1-3 AI-powered bridging task suggestions to fill a detected gap. Uses semantic search for context and Mastra agent for generation. Supports manual examples when semantic search returns zero results.",
  "version": "1.0.0",
  "request": {
    "headers": {
      "Content-Type": "application/json"
    },
    "body": {
      "type": "object",
      "required": ["gap_id", "predecessor_task_id", "successor_task_id"],
      "properties": {
        "gap_id": {
          "type": "string",
          "format": "uuid",
          "description": "UUID of the gap (from detect endpoint)"
        },
        "predecessor_task_id": {
          "type": "string",
          "format": "uuid",
          "description": "Task before the gap"
        },
        "successor_task_id": {
          "type": "string",
          "format": "uuid",
          "description": "Task after the gap"
        },
        "outcome_statement": {
          "type": "string",
          "minLength": 10,
          "maxLength": 500,
          "description": "Optional: User's active outcome for context"
        },
        "manual_examples": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 10,
            "maxLength": 200
          },
          "minItems": 1,
          "maxItems": 2,
          "description": "Optional: User-provided example tasks when semantic search returns zero results"
        }
      },
      "example": {
        "gap_id": "d4e5f6a7-b8c9-0123-def4-567890abcdef",
        "predecessor_task_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
        "successor_task_id": "c3d4e5f6-a7b8-9012-cdef-123456789012",
        "outcome_statement": "Launch mobile app by Q4 through user-centered design",
        "manual_examples": ["Build authentication flow", "Integrate payment gateway"]
      }
    }
  },
  "response": {
    "success": {
      "status": 200,
      "body": {
        "type": "object",
        "required": ["bridging_tasks", "search_results_count", "generation_duration_ms"],
        "properties": {
          "bridging_tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["id", "gap_id", "task_text", "estimated_hours", "cognition_level", "confidence", "reasoning", "source", "requires_review", "created_at"],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "gap_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "task_text": {
                  "type": "string",
                  "minLength": 10,
                  "maxLength": 500
                },
                "estimated_hours": {
                  "type": "integer",
                  "minimum": 8,
                  "maximum": 160,
                  "description": "1-4 weeks range"
                },
                "cognition_level": {
                  "type": "string",
                  "enum": ["low", "medium", "high"]
                },
                "confidence": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "description": "AI confidence score (target â‰¥0.7)"
                },
                "reasoning": {
                  "type": "string",
                  "minLength": 20,
                  "maxLength": 1000,
                  "description": "Explanation of why this task is needed"
                },
                "source": {
                  "type": "string",
                  "enum": ["ai_generated"]
                },
                "requires_review": {
                  "type": "boolean"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "edited_task_text": {
                  "type": "string",
                  "minLength": 10,
                  "maxLength": 500,
                  "description": "Optional: User-edited description"
                },
                "edited_estimated_hours": {
                  "type": "integer",
                  "minimum": 8,
                  "maximum": 160,
                  "description": "Optional: User-edited time estimate"
                }
              }
            },
            "minItems": 1,
            "maxItems": 3
          },
          "search_results_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of similar tasks found via semantic search"
          },
          "generation_duration_ms": {
            "type": "integer",
            "minimum": 0,
            "description": "Time taken to generate suggestions (target <5000ms)"
          }
        },
        "example": {
          "bridging_tasks": [
            {
              "id": "e5f6a7b8-c9d0-1234-ef56-7890abcdef12",
              "gap_id": "d4e5f6a7-b8c9-0123-def4-567890abcdef",
              "task_text": "Build app frontend with React Native components and navigation",
              "estimated_hours": 80,
              "cognition_level": "high",
              "confidence": 0.85,
              "reasoning": "The gap between 'Design app mockups' and 'Launch on app store' requires implementing the actual application. This task bridges the design-to-deployment gap by creating the functional UI.",
              "source": "ai_generated",
              "requires_review": true,
              "created_at": "2025-10-28T14:35:00Z"
            },
            {
              "id": "f6a7b8c9-d0e1-2345-f678-90abcdef1234",
              "gap_id": "d4e5f6a7-b8c9-0123-def4-567890abcdef",
              "task_text": "Implement backend API with authentication and data persistence",
              "estimated_hours": 120,
              "cognition_level": "high",
              "confidence": 0.78,
              "reasoning": "Mobile apps require backend infrastructure. This task provides the API layer needed between the frontend and app store launch.",
              "source": "ai_generated",
              "requires_review": true,
              "created_at": "2025-10-28T14:35:00Z"
            }
          ],
          "search_results_count": 5,
          "generation_duration_ms": 3842
        }
      }
    },
    "errors": {
      "400": {
        "description": "Invalid request (missing required fields, invalid UUIDs)",
        "body": {
          "type": "object",
          "properties": {
            "error": {
              "type": "string",
              "example": "Invalid input: gap_id is required"
            }
          }
        }
      },
      "404": {
        "description": "Gap, predecessor, or successor task not found",
        "body": {
          "type": "object",
          "properties": {
            "error": {
              "type": "string",
              "example": "Task not found: a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            }
          }
        }
      },
      "422": {
        "description": "Zero semantic search results and no manual examples provided",
        "body": {
          "type": "object",
          "properties": {
            "error": {
              "type": "string",
              "example": "No similar tasks found. Please provide manual examples."
            },
            "requires_manual_examples": {
              "type": "boolean",
              "example": true
            }
          }
        }
      },
      "500": {
        "description": "Server error during generation (timeout, AI failure)",
        "body": {
          "type": "object",
          "properties": {
            "error": {
              "type": "string",
              "example": "Task generation failed"
            }
          }
        }
      },
      "504": {
        "description": "Generation timeout (exceeded 8s limit)",
        "body": {
          "type": "object",
          "properties": {
            "error": {
              "type": "string",
              "example": "Generation timeout. Please try again."
            }
          }
        }
      }
    }
  },
  "performance": {
    "target_latency_p95": "5000ms",
    "max_latency": "8000ms"
  },
  "observability": {
    "logs": [
      "generation_latency_ms",
      "search_results_count",
      "bridging_tasks_generated",
      "confidence_scores",
      "ai_failures"
    ]
  }
}
